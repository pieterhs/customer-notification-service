services:
  api:
    build: 
      context: .
      dockerfile: src/CustomerNotificationService.Api/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_ENVIRONMENT=Development
      - ApiKey=dev-api-key-12345
      - ApplyMigrations=true
      - ConnectionStrings__Default=Host=postgres;Port=5432;Database=notify;Username=notify;Password=notify
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - notification-network

  workers:
    build:
      context: .
      dockerfile: src/CustomerNotificationService.Workers/Dockerfile
    depends_on:
      - postgres
    environment:
      - DOTNET_ENVIRONMENT=Development
      - POSTGRES_CONNECTION=Host=postgres;Port=5432;Database=notify;Username=notify;Password=notify
      - ApplyMigrations=true
    networks:
      - notification-network

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=notify
      - POSTGRES_PASSWORD=notify
      - POSTGRES_DB=notify
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notify -d notify"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - notification-network

volumes:
  postgres_data:

networks:
  notification-network:
    driver: bridge